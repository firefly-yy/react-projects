{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      //Logic for adding item to basket\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      //Logic for Removing item from basket\n      //we cloned the basket\n      let newBasket = [...state.basket]; //we check to see if product exists\n\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n\n      if (index >= 0) {\n        // item exists in basket, remove it...\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove product (id: ${action.id}) as it's not in basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sakura/Desktop/react-projects/amazon-demo/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","newBasket","index","findIndex","basketItem","id","splice","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC9BA,MAD8B,aAC9BA,MAD8B,uBAC9BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAAQC,IAAR,KAAiBA,IAAI,CAACC,KAAL,GAAaF,MAA7C,EAAoD,CAApD,CADO;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAOA,MAAM,CAACG,IAAd;AACI,SAAK,eAAL;AACI;AACA,aAAO,EACH,GAAGJ,KADA;AAEHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFL,OAAP;;AAIJ,SAAK,oBAAL;AACI;AAEA;AACA,UAAIQ,SAAS,GAAG,CAAC,GAAGL,KAAK,CAACR,MAAV,CAAhB,CAJJ,CAMI;;AACA,YAAMc,KAAK,GAAGN,KAAK,CAACR,MAAN,CAAae,SAAb,CACTC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBR,MAAM,CAACQ,EAD/B,CAAd;;AAIA,UAAGH,KAAK,IAAI,CAAZ,EAAc;AACV;AACAD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AAEH,OAJD,MAIO;AACHJ,QAAAA,OAAO,CAACS,IAAR,CACK,6BAA4BV,MAAM,CAACQ,EAAG,0BAD3C;AAGH;;AAED,aAAO,EACH,GAAGT,KADA;AAEHR,QAAAA,MAAM,EAAEa;AAFL,OAAP;;AAIJ;AACI,aAAOL,KAAP;AAjCR;AAmCH,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    basket: [],\n    user: null,\n};\n\nexport const getBasketTotal = (basket) => \nbasket?.reduce((amount,item) => item.price + amount,0);\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch(action.type) {\n        case 'ADD_TO_BASKET':\n            //Logic for adding item to basket\n            return { \n                ...state,\n                basket: [...state.basket, action.item],\n             }\n        case 'REMOVE_FROM_BASKET':\n            //Logic for Removing item from basket\n           \n            //we cloned the basket\n            let newBasket = [...state.basket];\n             \n            //we check to see if product exists\n            const index = state.basket.findIndex(\n                (basketItem) => basketItem.id === action.id\n            );\n            \n            if(index >= 0){\n                // item exists in basket, remove it...\n                newBasket.splice(index, 1);\n                \n            } else {\n                console.warn(\n                    `Can't remove product (id: ${action.id}) as it's not in basket!`\n                );\n            }\n\n            return {\n                ...state,\n                basket: newBasket,\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}